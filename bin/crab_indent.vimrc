if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
	set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible	" Use Vim defaults (much better!)

set bs=indent,eol,start		" allow backspacing over everything in insert mode

if &term=="xterm"
	set t_Co=256
	set t_Sb=[4%dm
	set t_Sf=[3%dm
endif

setlocal indentexpr=GetShIndent()
setlocal indentkeys+==then,=do,=else,=elif,=esac,=fi,=fin,=fil,=done
setlocal indentkeys-=:,0#


if has("syntax")
	syntax on
endif

if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if has("autocmd")
	filetype plugin indent on
endif

set showmatch           " Show matching brackets.

"if filereadable("/etc/vim/vimrc.local")
"       source /etc/vim/vimrc.local
"endif

color ron

if exists("*GetShIndent")
	finish
endif

let s:cpo_save = &cpo
set cpo&vim

let s:indent_eof = -1
let s:indent_echo1 = -1
let s:indent_echo2 = -1
let s:indent_slash = -1
let s:indent_befor_skip = -1


function GetShIndent0()
	let prevnum = prevnonblank(v:lnum - 1)
	if prevnum == 0
		return 0
	endif

	let prevprevnum = prevnonblank(prevnum - 1)
	if  prevprevnum == 0
		prevprevnum = prevnum
	endif

	" Add a 'shiftwidth' after if, while, else, case, until, for, function()
	" Skip if the line also contains the closure for the above

	let curline = getline(v:lnum)
	let curind = indent(v:lnum)
	let prevind = indent(prevnum)
	let prevline = getline(prevnum)
	let prevprevind = indent(prevprevnum)
	let prevprevline = getline(prevprevnum)

	if s:indent_befor_skip != -1
		let prevind = s:indent_befor_skip
	endif
	if curline =~ '^\s*#[^{}].*' || curline =~ '^\s*#$'
		let curline='# '
	endif

	if prevline =~ '^\s*#[^{}].*' || prevline =~ '^\s*#$'
		let prevline='# '
	endif

	if prevline =~ '.*[<][<]EOF.*' && prevline !~ '^\s*#[ \t#]'
		let s:indent_eof = prevind
		return curind
	endif

	if s:indent_eof != -1 && prevline =~ 'EOF'
		let prevind = s:indent_eof
		let s:indent_eof = -1
	endif

	if s:indent_eof != -1
		return curind
	endif

	if curline =~ '^"[^"].*$' && curline !~ '^".*[^\\]".*$'
		let s:indent_echo1 = prevind
		return curind
	endif

	if prevline =~ 'echo "' && prevline !~ 'echo ""' && prevline !~ 'echo ".*[^\\]"' && prevline !~ '^\s*#[ \t#]'
		let s:indent_echo1 = prevind
		return curind
	endif

	if s:indent_echo1 != -1 && ( prevline =~ '^.*[^\\]"' || prevline =~ '^"$' )
		let prevind = s:indent_echo1
		let s:indent_echo1 = -1
	endif

	if s:indent_echo1 != -1
		return curind
	endif

	if curline =~ "^'[^'].*$" && curline !~ "^'.*'"
		let s:indent_echo2 = prevind
		return curind
	endif

	if prevline =~ "echo '" && prevline !~ "echo '.*'" && prevline !~ '^\s*#[ \t#]'
		let s:indent_echo2 = prevind
		return curind
	endif

	if s:indent_echo2 != -1  && ( prevline =~ "^[^'].*'" || prevline =~ "^'$" )
		let prevind = s:indent_echo2
		let s:indent_echo2 = -1
	endif

	if s:indent_echo2 != -1
		return curind
	endif


	if prevline =~ '^\s*[ |]*\(if\|for\|while\|else\|elif\|until\)\>'
				\ || prevline =~ '^.*[|][ ]while'
				\ || (prevline =~ '^\s*case\>' && g:sh_indent_case_labels)
				\ || prevline =~ '^\s*\S*\s*(.*)\s*{$'
				\ || prevline =~ '^\s*function\s*\<\k\+\>\s*(.*)\s*{$'
				\ || prevline =~ '^\s*{$'
				\ || prevline =~ '^\s*#{$'
				\ || prevline =~ '^\s*[^() \t]\{1,\})'
				\ || prevline =~ '^\s*[ |]*($'
		if prevline !~ '\(esac\|fi\|done\)\>\s*$' && prevline !~ '}\s*$' && prevline !~ '^\s*)' && prevline !~ '^\s*#[ \t#]'
			let prevind = prevind + &sw
			return prevind
		endif
	endif

	if prevline =~ '.*[^\\]$' && s:indent_slash == prevind
		let prevind = prevind - &sw
		let s:indent_slash = -1
	endif


	if prevline =~ ';;'
		let prevind = prevind - &sw
		return prevind
	endif
	" Subtract a 'shiftwidth' on a else, esac, fi, done
	" Retain the indentation level if line matches fin (for find)
	if (curline =~ '^\s*\(else\|elif\|fi\|done\)\>'
				\ || (curline =~ '^\s*esac\>' && g:sh_indent_case_labels)
				\ || curline =~ '^\s*)*}'
				\ || curline =~ '^\s*#}'
				\ || curline =~ '^\s*)'
				\ )
				\ && curline !~ '^\s*fi[ln]\>' && curline !~ '^\s*#[ \t#]'
		let prevind = prevind - &sw
	endif

	if prevline =~ '.*\\$' && s:indent_slash == -1
			\ && prevline !~ '^\s*#[ \t#]'
			\ && (prevprevline !~ '.*\\$' || prevprevline =~ '^\s*#[ \t#]' )
		let prevind = prevind + &sw
		let s:indent_slash = prevind
		return prevind
	endif



	return prevind
endfunction

function GetShIndent()
	let curline = getline(v:lnum)
	let prevind = GetShIndent0()
	if s:indent_eof==-1 && s:indent_echo1==-1 && s:indent_echo2==-1 && s:indent_slash==-1
		if curline =~ '^#[^{}].*' || curline =~ '^#$'
			if s:indent_befor_skip =~ -1
				let s:indent_befor_skip = prevind
			endif
			return 0
		endif
	endif
	if s:indent_befor_skip != -1
		let s:indent_befor_skip = -1
	endif
	return prevind
endfunction

let &cpo = s:cpo_save
unlet s:cpo_save

color ron
set nowrap
set nopaste
set ignorecase

color ron
:runtime! ftplugin/man.vim
set nobackup                            "–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π (filename.txt~)"
set history=50                          "—Å–æ—Ö—Ä–∞–Ω—è—Ç—å 50 —Å—Ç—Ä–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
set ruler                               "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
set incsearch                           "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞
set nohlsearch                          "–ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
set mouse=a                             "–∏—Å–ø–æ–ª—å–∑—É–µ–º –º—ã—à–∫—É
set autoindent                          "–≤–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
set smartindent
set ai                                  "–ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –æ—Ç—Å—Ç—É–ø –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
set ignorecase                          "–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
"set background=dark                     "—Ñ–æ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ - —Ç–µ–º–Ω—ã–π
"set ttyfast                             "–∫–æ–Ω–Ω–µ–∫—Ç —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º –±—ã—Å—Ç—Ä—ã–π
set visualbell                          "–º–∏–≥–∞–µ–º –≤–º–µ—Å—Ç–æ –ø–∏—â–∞–Ω–∏—è
set showmatch                           "–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
set shortmess+=tToOI                    "—É–±–∏—Ä–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
set rulerformat=%(%l,%c\ %p%%%)         "—Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–æ–∫–∞ —Ö —Å—Ç–æ–ª–±–µ—Ü, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–∞ –≤ %
set wrap                                "–Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–æ–¥—Ö–æ–¥–µ –∫ –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞
set linebreak                           "–ø–µ—Ä–µ–Ω–æ—Å—ã –º–µ–∂–¥—É –≤–∏–¥–∏–º—ã–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
set t_Co=256                            "–≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É 256 —Ü–≤–µ—Ç–æ–≤
set wildmenu                            "–∫—Ä–∞—Å–∏–≤–æ–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
set wcm=<Tab>                           "WTF? but all work
set autowrite                           "–∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É —Ñ–∞–π–ª—É
set encoding=utf8                       "–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
set termencoding=utf8                   "–ö–æ–¥–∏—Ä–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª
set fileencodings=utf8,cp1251,koi8r     "–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞)
set showcmd showmode                    "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
set autochdir                           "—Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
"set stal=2                              "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–±–∞–º–∏
"set tpm=100                             "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∞–±–æ–≤
set wak=yes                             "–∏—Å–ø–æ–ª—å–∑—É–µ–º ALT –∫–∞–∫ –æ–±—ã—á–Ω–æ, –∞ –Ω–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω–∏
set noex                                "–Ω–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
set ssop+=resize                        "—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–º–µ—Ä –æ–∫–æ–Ω Vim'–∞
"set list                                "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã...
set listchars=tab:‚Üí‚Üí,trail:‚ãÖ
