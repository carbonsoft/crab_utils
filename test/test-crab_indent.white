#!/bin/bash

echo "$0 $@ [$$] START" >&2

set -eu
# set -eu

sys::usage "$@"
### --help Info:
### --help Usage:
### --help Example: test-crab_indent.white

declare -a servers=(
'https://example.com'
'http://example.com'
'http://127.0.0.1/cache/'
)

changelog1(){
	echo ""
	return 0
}

changelog2(){
	echo "qaaa\"qqqq"
	return 0
}

changelog3(){
	echo ''
	return 0
}

changelog4(){
	echo 'qqq'
	return 0
}



tmp1(){
	echo 1
	return 0
}
tmp1(){
	echo 1
	return 0
}


echo test

cat <<EOF
1
2
3
4
5
6
EOF

{
	echo test
}

for f in 1 2 3; do
	echo test
done

set -eu

echo test
{
	echo test
}


if true; then
	echo true
fi

while false; do
	echo true

	if true; then
		echo test
	else
		echo test
	fi
	echo true
done
cat | grep . | while read -r t; do
	echo qwe
done

function test1(){
	echo qwe
	return 0
}

cat /proc/meminfo \
	| grep . | while read -r t; do
		echo $t
	done

cat /proc/meminfo \
	| grep . \
	| while read -r t; do
		echo $t
	done

{
	(
		echo test
	)
}
set -o pipefail
(
	set -x; PS4=''; . /node/bin/__vm_config;
	set +x;
	for conf in $VM_DIR/*.conf; do
		set -x
		. "$conf"
	done
	set +x
) 2>&1 | grep '=' |grep -v '+ PS4' \
	| sed 's/\(eval \)*\('"'"'\)*\([^ ]*\)[=].*/\3/' | sort | uniq \
	| (
		. /node/bin/__vm_config
		while read -r val_name; do
			my_continue=0
			for conf in $VM_DIR/*.conf /node/node_id.conf; do
				if grep -qm1 "^${val_name}=" "$conf"; then
					. "$conf"
					echo "${conf##*/}:${val_name}=${!val_name}"
					my_continue=1
				fi
			done
			[ "$my_continue" = 1 ] && continue
			conf=/node/node$NODE_ID/etc/node.conf
			if grep -qm1 "^${val_name}=" "$conf"; then
				. "$conf"
				echo "${conf##*/}:${val_name}=${!val_name}"
				my_continue=1
			fi
			[ "$my_continue" = 1 ] && continue
			conf=/node/etc/main.conf
			if grep -qm1 "^${val_name}=" "$conf"; then
				. "$conf"
				echo "${conf##*/}:${val_name}=${!val_name}"
				my_continue=1
			fi
			[ "$my_continue" = 1 ] && continue
			echo "CALC:${val_name}=${!val_name}"

		done
	) | sort
set +o pipefail
__node(){
	shift
	case $1 in
	"list")
		__node_list "$@"
		;;
	"do")
		__node_do "$@"
		;;
	"update")
		node_update "$@"
		;;
	*)
		echo "Not supported: $@"
		;;
	esac
	return 0
}

#{
	# indent comment
#}

f1(){
	echo "1
2
3
4
5
6
7
"
	echo 1
	return 0
}

f2(){
	echo '1
2
3
4
5
6
7
'
	echo 1
	return 0
}

f3(){
	echo "1
2
3
4
5
6
7"
	echo 1
	return 0
}

f4(){
	echo '1
2
3
4
5
6
7'
	echo 1
	return 0
}

f5(){
	cmd1 \
"1
2
 3
4
 5
6
7"
	echo 1
	return 0
}

f6(){
	cmd1 \
'1
2
 3
4
 5
6
 7'
	echo 1
	return 0
}

f7(){
	cmd1 \
"1
2
 3
4
 5
6
7
"
	echo 1
	return 0
}

f8(){
	cmd1 \
'1
2
 3
4
 5
6
 7
'
	echo 1
	return 0
}

if true; then
# 1
# 2
	cmd
fi

if true; then
# test 3
	cat >tmp <<EOF
# 1
test1
# 2
test2
test3
EOF
	cmd2
fi
if [ "${1:-}" = "save" ]; then
	check_and_set_dir "${2:-}"
	if [ -n "${3:-}" ]; then
		USER_MSG="$3"
	fi
	autogit_sync

elif [ "${1:-}" = "install" ]; then
	check_and_set_dir "${2:-}"
	ARG_ORIGIN="${3:-}"
	autogit_install

# Для совместимости со старыми версиями, $0 /dir - эквивалентно $0 save /dir
elif [ ! -z "${1:-}" -a -d "${1:-}" ]; then
	check_and_set_dir "${1:-}"
	if [ -n "${2:-}" ]; then
		USER_MSG="$2"
	fi
	autogit_sync

else
	echo -e "\nUnknown command: ${1:-}\n"
	usage
	exit 1
fi
get_file_type() {
	set -e
	# Определим тип файла. Вернём в stdout
	# Возвращаемый тип, должен поддерживаться crab_syntax
	# Возвращаем только те типы, которые надо проверять.
	local file="$1"
	local file_type file_mime_type
	file_mime_type=$(file -bi "$file")

	case "$file_mime_type" in
	text/x-shellscript*)
		echo bash
		;;
# 	text/x-python*)
# 		echo python
# 		;;
	esac
	return 0
}

echo "$0 $@ [$$] SUCCESS" >&2
exit 0
